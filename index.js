((e,t)=>{"use strict";var n=t("path"),r=t("fs"),s=t("child_process"),i=t("stream"),o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};const a="ttfautohint".concat("win32"===e.platform?".exe":""),c=n.resolve(__dirname,"bin",a),p=Symbol("ttfautohint/buffer"),h={extended:!1,icon:!1,info:!0,hintingLimit:2048,min:12,max:48,reference:"",size:16},u=e=>{const t=e.info,n=["-W","-i",`-G ${e.hintingLimit}`];return t||n.push("-n"),e.reference&&n.push(`-R ${e.reference}`),e.icon?(n.push("-s","-x 24","-l 12","-r 48"),n):(e.extended&&n.push("-p"),n.concat([`-x ${e.size}`,`-l ${Math.min(e.min,e.size)}`,`-r ${Math.max(e.max,e.size)}`]))};class f extends i.Transform{static compile(e,t,n={}){const s=new f(n),i=r.createReadStream(e),o=r.createWriteStream(t);i.pipe(s).pipe(o).close()}constructor(e={}){super({allowHalfOpen:!1}),this[p]=[],this.options=o({},h,e)}_transform(e,t,n){this[p].push(e),n()}_flush(e){const{stdout:t,stderr:n}=s.spawnSync(c,u(this.options),{input:Buffer.concat(this[p])});n.length?e(String(n)):e(null,t)}}Object.defineProperty(f,"name",{value:"TTFAutohintTransformer"}),module.exports=f})(process,require);
