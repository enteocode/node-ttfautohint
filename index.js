((e,t)=>{"use strict";var r=t("path"),n=t("fs"),s=t("child_process"),i=t("stream"),o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};const c="ttfautohint".concat("win32"===e.platform?".exe":""),a=r.resolve(__dirname,"bin",c),f=Symbol("ttfautohint/buffer"),u={extended:!1,icon:!1,info:!0,hintingLimit:2048,min:12,max:48,reference:"",size:16},h=e=>{const t=["-W","-i",`-G ${e.hintingLimit}`];return e.info||t.push("-n"),e.reference&&t.push(`-R ${e.reference}`),e.icon?(t.push("-s","-x 24","-l 12","-r 48"),t):(e.extended&&t.push("-p"),t.concat([`-x ${e.size}`,`-l ${Math.min(e.min,e.size)}`,`-r ${Math.max(e.max,e.size)}`]))};class p extends i.Transform{static compile(e,t,r={}){const s=new p(r),i=n.createReadStream(e),o=n.createWriteStream(t);i.pipe(s).pipe(o).close()}static convert(e,t={}){const r=h(o({},u,t)),{stderr:n,stdout:i}=s.spawnSync(a,r,{input:e,windowsHide:!0});if(n.length)throw String(n);return Buffer.from(i)}constructor(e={},t){super(t),this[f]=[],this.options=e}_transform(e,t,r){this[f].push(Buffer.from(e)),r()}_flush(e){try{const t=Buffer.concat(this[t]);e(null,p.convert(t,this.options))}catch(t){e(t.message)}}}Object.defineProperty(p,"name",{value:"TTFAutohint"}),module.exports=p})(process,require);
