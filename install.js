((t,e)=>{"use strict";var n=e("os"),i=e("fs"),o=e("path"),r=e("child_process"),a=e("https"),s=e("mkdirp"),c=e("rimraf"),l=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(e("decompress"));const p=__dirname,h=((e=t.env)=>String(e.npm_package_config_repository).replace(/\/+$/,""))(),u=511&~t.umask(),f=(t,e,n=[])=>t.map(t=>t[e](...n)),d=(e=t.platform)=>"win32"===e?"ttfautohint".concat(".exe"):"ttfautohint",m=()=>o.join(p,"bin",d()),w=(t,e=0)=>new Promise((n,i)=>{const o=a.get(t);o.on("response",o=>{const{statusCode:r,headers:a}=o;if(r>300&&r<400&&0!==e)w(a.location,e-1).then(n).catch(i);else if(200!==r)i(`HTTP ${r} - ${t}`);else{const t=[];o.on("data",e=>{t.push(e)}),o.on("end",()=>{n(Buffer.concat(t))})}}),o.on("error",i)}),g=(t,e,n=u)=>{s.sync(o.dirname(t),n),i.writeFileSync(t,e,{mode:n})},y=(t=m())=>{const e=r.execFileSync(t,["--version"]),n=String(e).match(/[0-9]+\.[0-9]+(?:\.[0-9]+)?(?:-\w+)?/);return n?n[0]:""},b=(t,e=!1,n=console.log)=>{const i=["#","[ttfautohint]",t];e&&i.push("\r\n"),n(...i)},$=o.join(((e=t.env)=>{const o=String(e.npm_config_cache);return o&&i.existsSync(o)?o:n.tmpdir()})(),"enteocode",((e=t.env)=>String(e.npm_package_name).split("/").pop())()),_=o.join($,"build"),S=o.join($,"src"),z=o.join($,"tar"),v=o.join($,"build","bin",d()),x="-fPIC -g -O3",F=(t,e=[])=>[`CFLAGS="${x} -I${t}/include"`,`CXXFLAGS="${x} -I${t}/include"`,`LDFLAGS="-fPIC -L${t}/lib -L${t}/lib64"`,"--disable-shared","--enable-static",`--prefix="${t}"`,...e];class k{constructor(t,e,n=[]){this.tar="",this.src="",this.name=t,this.url=e,this.options=n}async download(t=z){if(""===this.tar){const e=o.basename(this.url),n=o.join(t,e);i.existsSync(n)||g(n,await w(this.url,3)),this.tar=n}return this}async extract(t=S){if(""===this.src){const e=o.join(t,this.name);s.sync(e),await l(this.tar,e,{strip:1}),this.src=e}return this}compile(t=_,e="install"){s.sync(t);const n={cwd:this.src,windowsHide:!0},i=[`./configure ${F(t,this.options).sort().join(" ")}`,"make",`make ${e}`];return new Promise((t,e)=>{r.exec(i.join(" && "),n,(n,i)=>{n?e(n):t(i)})})}}const C=m(),G=o.dirname(C),L=`${x} -I${_}/include`,P=`${L} -L${_}/lib -L${_}/lib64`,j=()=>{b(`Version (${y(v)})`,!0),s.sync(G),i.copyFileSync(v,C)};(async()=>{const e=((e=t.env)=>Boolean(e.npm_package_config_force_compile))();if(((e=t.env)=>void 0!==e.npm_execpath)()||((e,n=!0)=>{b(e instanceof Error?e.message:e,!0,console.error),n&&t.exit(1)})("This script cannot be processed outside of NPM"),!e){if((()=>i.existsSync(m()))())return void b(`Local binary found (${y(C)})`,!0);if((()=>i.existsSync(v))())return b("Cached binary found on temporary folder"),void j()}if(await(async()=>{c.sync(`${$}/(src|build)`)})(),!e&&((e=t.platform,n=t.arch)=>"darwin"===e||"win32"===e||"linux"===e&&"x64"===n)()){b(`Getting precompiled binary for ${((e=t.platform,n=t.arch)=>`${e.toUpperCase()}/${n}`)()}`);try{const e=((e=t.platform)=>[h,e,((e=t.env)=>String(e.npm_package_config_version))(),d()].join("/"))(),n=await w(e,3);return g(v,n),void j()}catch(t){b(t)}}b("Getting source packages");const n=[new k("freetype","https://download.savannah.gnu.org/releases/freetype/freetype-2.9.tar.gz",["--without-bzip2","--without-png","--without-zlib","--without-harfbuzz",'PKG_CONFIG=" "']),new k("harfbuzz","https://www.freedesktop.org/software/harfbuzz/release/harfbuzz-1.7.6.tar.bz2",["--disable-dependency-tracking","--disable-gtk-doc-html","--without-glib","--without-cairo","--without-fontconfig","--without-icu","PKG_CONFIG=true",`FREETYPE_CFLAGS="${L}/freetype2"`,`FREETYPE_LIBS="${P} -lfreetype"`]),new k("ttfautohint","https://download.savannah.gnu.org/releases/freetype/ttfautohint-1.8.1.tar.gz",["--disable-dependency-tracking","--without-qt","--without-doc",`--with-freetype-config="${_}/bin/freetype-config"`,"PKG_CONFIG=true",`HARFBUZZ_CFLAGS="${L}/harfbuzz"`,`HARFBUZZ_LIBS="${P} -lharfbuzz"`])];Promise.all(f(n,"download")).then(()=>{b("Extracting"),Promise.all(f(n,"extract")).then(async([t,e,n])=>{b("Compiling binaries"),await t.compile(),await e.compile(),await n.compile(_,"install-strip"),j()})})})()})(process,require);
